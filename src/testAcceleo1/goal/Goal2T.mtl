[comment encoding = UTF-8 /]
[module Goal2T('http:///fm.ecore', 'http:///grl.ecore', 'http:///urn.ecore', 'http:///urncore.ecore')]


[query public getDecomposition(intEl : IntentionalElement) : String = if intEl.decompositionType.oclIsUndefined() then '' else intEl.decompositionType.toString()  endif /]
[query public getIntentionalElement(node: IURNNode) : IntentionalElement = node.oclAsType(grl::IntentionalElementRef)._def.oclAsType(grl::IntentionalElement) /]
[query public getBelief(node: IURNNode) : Belief = node.oclAsType(grl::Belief)/]
[query public getBeliefName(belief: Belief) : String = belief.description /]


[template public model2text(anURNspec : URNspec)
{
	;
}]
[comment @main/]
[file (anURNspec.name+'.goal', false, 'UTF-8')]
[comment identify actors if any in the given URN spec and transform /]

[for (a :  Actor | anURNspec.grlspec.actors)]
[comment output actor name /]
actor [a.name/]{
[comment get all nodes of an actor /]
[for (cr : IURNContainerRef | a.contRefs)]
[for (node: IURNNode | cr.nodes)]

[comment node.oclAsType(grl::IntentionalElementRef).name/]
[let ie: IntentionalElement = node.oclAsType(grl::IntentionalElementRef)._def.oclAsType(grl::IntentionalElement)]

[if (ie.type.toString().equalsIgnoreCase('Softgoal'))]
	softgoal [ie.name/] {
	[if (ie.importanceQuantitative = 0)]
	[else]
		importance [ie.importanceQuantitative/]
	[/if]
	[if not (ie.refs->isEmpty())]
		[for (link: IntentionalElementRef | ie.refs)]
				[for (pred: IURNConnection | link.pred)]
					[ if not (pred.source.oclAsType(grl::Belief).oclIsInvalid())]
		[pred.source.oclAsType(grl::Belief).description/]
					[/if ]
			[/for]
		[/for]
	[/if]
	}
[/if]
[if (ie.type.toString().equalsIgnoreCase('Goal'))]
	goal [ie.name/]{
	[if not (ie.refs->isEmpty())]
		[for (link: IntentionalElementRef | ie.refs)]
				[for (pred: IURNConnection | link.pred)]
					[ if not (pred.source.oclAsType(grl::Belief).oclIsInvalid())]
		[pred.source.oclAsType(grl::Belief).description/]
					[/if ]
			[/for]
		[/for]
	[/if]
	[if (ie.importanceQuantitative = 0)]
	[else]
		importance [ie.importanceQuantitative/]
	[/if]
	[if not (ie.linksSrc->isEmpty())]
		[for (link: ElementLink | ie.linksSrc)]
		contributesTo [link.dest.name/] with [link.oclAsType(grl::Contribution).quantitativeContribution/]
		[/for]
	[/if]
	[if not (ie.linksDest->isEmpty())]
		[for (link: ElementLink | ie.linksDest)]
		[if (link.eClass().name.equalsIgnoreCase('Dependency'))]
		dependsOn [link.src.oclAsType(IntentionalElement).refs.contRef.contDef.oclAsType(Actor).name/].[link.src.name/]
		[/if]
		[/for]
	[/if]
	}
[/if]
[if (ie.type.toString().equalsIgnoreCase('Task'))]
	[if (ie.refs->size()) = 1]
	task [ie.name/]{
	[/if]
	[if (ie.refs->size()) = 2]
	feature [ie.name/]{
	[/if]
	[if not (ie.refs->isEmpty())]
		[for (link: IntentionalElementRef | ie.refs)]
				[for (pred: IURNConnection | link.pred)]
					[ if not (pred.source.oclAsType(grl::Belief).oclIsInvalid())]
		[pred.source.oclAsType(grl::Belief).description/]
					[/if ]
			[/for]
		[/for]
	[/if]
	[if (ie.importanceQuantitative = 0)]
	[else]
		importance [ie.importanceQuantitative/]
	[/if]
	[if not (ie.linksSrc->isEmpty())]
		[for (link: ElementLink | ie.linksSrc)]
		[if (link.eClass().name.equalsIgnoreCase('Decomposition'))]
		[link.oclAsType(grl::Decomposition).dest.oclAsType(IntentionalElement).decompositionType.toString().toLowerFirst()/] decomposes [link.oclAsType(grl::Decomposition).dest.oclAsType(IntentionalElement).name/]
		[/if]
		[if (link.eClass().name.equalsIgnoreCase('Contribution'))]
		contributesTo [link.dest.name/] [if (link.oclAsType(grl::Contribution).correlation)]correlation[/if] with [link.oclAsType(grl::Contribution).quantitativeContribution/]
		[/if]
		[/for]
	[/if]
	[if not (ie.linksDest->isEmpty())]
		[for (link: ElementLink | ie.linksDest)]
		[if (link.eClass().name.equalsIgnoreCase('Dependency'))]
		dependsOn [link.src.oclAsType(IntentionalElement).refs.contRef.contDef.oclAsType(Actor).name/].[link.src.name/]
		[/if]
		[/for]
	[/if]
	}
[/if]
[if (ie.type.toString().equalsIgnoreCase('Ressource'))]
	[if (ie.refs->size()) = 1]
	resource [ie.name/]{
	[/if]
	[if (ie.refs->size()) = 2]
		feature [ie.name/]{
	[/if]
	[if not (ie.refs->isEmpty())]
		[for (link: IntentionalElementRef | ie.refs)]
				[for (pred: IURNConnection | link.pred)]
					[ if not (pred.source.oclAsType(grl::Belief).oclIsInvalid())]
		[pred.source.oclAsType(grl::Belief).description/]
					[/if ]
			[/for]
		[/for]
	[/if]
	[if (ie.importanceQuantitative = 0)]
	[else]
		importance [ie.importanceQuantitative/]
	[/if]
	[if not (ie.linksSrc->isEmpty())]
		[for (link: ElementLink | ie.linksSrc)]
		[if (link.eClass().name.equalsIgnoreCase('Decomposition'))]
		[link.oclAsType(grl::Decomposition).dest.oclAsType(IntentionalElement).decompositionType/] decomposes [link.oclAsType(grl::Decomposition).dest.oclAsType(IntentionalElement).name/]
		[/if]
		[if (link.eClass().name.equalsIgnoreCase('Contribution'))]
		contributesTo [link.dest.name/] [if (link.oclAsType(grl::Contribution).correlation)]correlation[/if] with [link.oclAsType(grl::Contribution).quantitativeContribution/]
		[/if]
		[/for]
	[/if]
	[if not (ie.linksDest->isEmpty())]
		[for (link: ElementLink | ie.linksDest)]
		[if (link.eClass().name.equalsIgnoreCase('Dependency'))]
		dependsOn [link.src.oclAsType(IntentionalElement).refs.contRef.contDef.oclAsType(Actor).name/].[link.src.name/]
		[/if]
		[/for]
	[/if]
	}
[/if]
[/let]
[/for]
}

[/for]
[/for]

[/file]
[/template]